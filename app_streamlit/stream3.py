import streamlit as st
import pickle
import re
import numpy as np
import time

# Cargar el modelo entrenado
with open("../models/final_model.pkl", "rb") as model_file:
    model = pickle.load(model_file)

# Palabras seguras
SAFE_WORDS = ["google.com", "amazon.com", "bbva.com", "santander.com", "slack.com", "kaggle.com", "x.com", "github.com"]
DANGER_WORDS = {
    "google": "https://www.google.com",
    "amazon": "https://www.amazon.com",
    "bbva": "https://www.bbva.com",
    "santander": "https://www.santander.com",
    "correos": "https://www.correos.es",
    "whatsapp": "https://www.whatsapp.com",
    "netflix": "https://www.netflix.com",
    "aeat": "https://www.agenciatributaria.es"
}

# Funci√≥n para extraer caracter√≠sticas del URL
def extract_features(url):
    return {
        "NumDash": url.count("-"),
        "NumDots": url.count("."),
        "NumDashInHostname": url.split("/")[2].count("-") if len(url.split("/")) > 2 else 0,
        "NumQueryComponents": url.count("&") + url.count("="),
        "IpAddress": 1 if re.match(r"(\d{1,3}\.){3}\d{1,3}", url) else 0,
        "DomainInSubdomains": 1 if len(url.split(".")) > 2 else 0,
        "DomainInPaths": 1 if "/" in url.split("?")[0] else 0,
        "HostnameLength": len(url.split("/")[2]) if len(url.split("/")) > 2 else 0,
        "PathLevel": url.count("/"),
        "UrlLength": len(url)
    }

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title='SAFE SURF:  Analiza tu URL',
    page_icon='üåê',
    layout='wide'
)

# Estilos CSS
st.markdown(
    """
    <style>
        body {
            background: linear-gradient(90deg, #00008B, #000000);
            color: white;
        }
        .stButton>button {
            background-color: #4CAF50; 
            color: white; 
            border-radius: 5px;
        }
        .stTextInput>div>div>input {
            border-radius: 10px;
        }
        .footer {
            position: fixed; 
            bottom: 0; 
            left: 0; 
            width: 100%; 
            background-color: black; 
            color: white; 
            text-align: center; 
            padding: 5px; 
            font-size: 12px;
        }
        .stSidebar {
            width: 220px; /* Reduce the sidebar width */
        }
        iframe {
            width: 100%;
            height: 200px;
        }
        /* Pesta√±as con fondo azul muy oscuro */
        .tab-content {
            display: flex;
            justify-content: center;
            padding: 10px;
        }
        .tabs {
            display: flex;
            justify-content: center;
            background-color: #1c1c1c;
            border-radius: 20px;
        }
        .tabs div {
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 20px;
            color: white;
            font-weight: bold;
        }
        .tabs div:hover {
            background-color: #333;
        }
        .tabs .active {
            background-color: #00CED1;
            color: black;
        }
    </style>
    """,
    unsafe_allow_html=True
)

# Pesta√±as en la parte superior
tabs = ["Inicio", "An√°lisis de URL con IA", "An√°lisis por imagen", "Acerca de"]
selected_tab = st.radio("Selecciona una pesta√±a", tabs, index=0, horizontal=True)

# Video en la parte superior
st.markdown("""
<div style="position: relative; width: 100%; height: 0; padding-top: 56.2500%;
 padding-bottom: 0; box-shadow: 0 2px 8px 0 rgba(63,69,81,0.16); margin-top: 1.6em; margin-bottom: 0.9em; overflow: hidden;
 border-radius: 8px; will-change: transform;">
  <iframe loading="lazy" style="position: absolute; width: 100%; height: 100%; top: 0; left: 0; border: none; padding: 0;margin: 0;"
    src="https://www.canva.com/design/DAGfpxvPiCk/LYUYFN463gNhK_CvUHHaKw/watch?embed" allowfullscreen="allowfullscreen" allow="fullscreen">
  </iframe>
</div>
""", unsafe_allow_html=True)

if selected_tab == "Inicio":
    st.markdown("<h1 style='text-align: center; color: #00CED1;'>SAFE SURF</h1>", unsafe_allow_html=True)
    st.image("../img/logo.jpeg", width=300)
    st.markdown("<h3 style='text-align: center;'>Bienvenido a la herramienta de an√°lisis de URLs y detecci√≥n de riesgos cibern√©ticos</h3>", unsafe_allow_html=True)
    st.write("Esta aplicaci√≥n utiliza un modelo de Machine Learning para analizar enlaces web y detectar elementos de posible phishing, malware, y otros riesgos a la seguridad de su dispositivo")

elif selected_tab == "An√°lisis de URL con IA":
    st.markdown("<h2 style='text-align:center; color: #00CED1;'>Chequea la seguridad de tu URL</h2>", unsafe_allow_html=True)
    st.image("../img/logo2.png", width=300)
    type_input = st.radio("C√≥mo quieres analizar la URL?", ("Introducir URL", "Ingresar caracter√≠sticas manualmente"))

    features = {}
    contiene_safe_word = False  # Variable para evaluar seguridad directa

    if type_input == "Introducir URL":
        url = st.text_input("Introduce una URL para analizar:")
        if url:
            features = extract_features(url)
            contiene_safe_word = any(word in url for word in SAFE_WORDS)
            for key, value in DANGER_WORDS.items():
                if key in url.lower():
                    st.write(f"‚ö†Ô∏è Esta URL parece sospechosa y est√° imitando a **{key}**.")
                    st.write(f"URL segura sugerida: {value}")
                    break
    
    elif type_input == "Ingresar caracter√≠sticas manualmente":
        features = {
            "NumDash": st.number_input("N√∫mero de guiones", min_value=0, value=0),
            "NumDots": st.number_input("N√∫mero de puntos", min_value=0, value=0),
            "NumDashInHostname": st.number_input("N√∫mero de guiones en el hostname", min_value=0, value=0),
            "NumQueryComponents": st.number_input("N√∫mero de par√°metros en la query", min_value=0, value=0),
            "IpAddress": st.selectbox("¬øContiene una IP en lugar de dominio?", [0, 1]),
            "DomainInSubdomains": st.selectbox("¬øEl dominio est√° en los subdominios?", [0, 1]),
            "DomainInPaths": st.selectbox("¬øEl dominio aparece en la ruta?", [0, 1]),
            "HostnameLength": st.number_input("Longitud del hostname", min_value=0, value=10),
            "PathLevel": st.number_input("Nivel del path", min_value=0, value=1),
            "UrlLength": st.number_input("Longitud del URL", min_value=0, value=10)
        }
    
    if st.button("üîç Analizar"):
        st.progress(100)
        time.sleep(1)
        
        feature_values = np.array(list(features.values())).reshape(1, -1)
        prob = model.predict_proba(feature_values)[0]
        
        # Ajustar probabilidad si la URL tiene una palabra segura
        if contiene_safe_word:
            prob[0] = min(prob[0] + 0.25, 1.0)
            prob[1] = 1.0 - prob[0]
        
        # Evaluar seguridad y mostrar resultados
        with st.container():
            if prob[0] >= 0.75:
                st.markdown("<div style='background-color:#d4edda;padding:10px;border-radius:10px;'> <h3>üéâ La URL parece MUY SEGURA ‚úÖ</h3></div>", unsafe_allow_html=True)
                st.balloons()
            elif 0.60 < prob[0] < 0.75:
                st.markdown("<div style='background-color:#c3e6cb;padding:10px;border-radius:10px;'> <h3>üü¢ La URL parece SEGURA</h3></div>", unsafe_allow_html=True)
            elif 0.50 <= prob[0] <= 0.60:
                st.markdown("<div style='background-color:#ffeeba;padding:10px;border-radius:10px;'> <h3>‚òëÔ∏è La URL parece SEGURA pero ten cuidado</h3></div>", unsafe_allow_html=True)
            elif 0.25 <= prob[0] < 0.50:
                st.markdown("<div style='background-color:#f5c6cb;padding:10px;border-radius:10px;'> <h3>‚ö†Ô∏è Parece PELIGROSA, evita compartir informaci√≥n personal</h3></div>", unsafe_allow_html=True)
            else:
                st.markdown("<div style='background-color:#f8d7da;padding:10px;border-radius:10px;'> <h3>üö© ALTAMENTE INSEGURA ‚õîÔ∏è NO ENTRAR</h3></div>", unsafe_allow_html=True)
        st.write("**Probabilidad:**")
        st.write(f"‚úîÔ∏è Potencial de seguridad: {prob[0]:.2%} | ‚ùå Potencial de peligro: {prob[1]:.2%}")

        features_es = {
    "NumDash": "N√∫mero de guiones",
    "NumDots": "N√∫mero de puntos",
    "NumDashInHostname": "N√∫mero de guiones en el hostname",
    "NumQueryComponents": "N√∫mero de par√°metros en la query",
    "IpAddress": "¬øContiene una IP en lugar de dominio?",
    "DomainInSubdomains": "¬øEl dominio est√° en los subdominios?",
    "DomainInPaths": "¬øEl dominio aparece en la ruta?",
    "HostnameLength": "Longitud del hostname",
    "PathLevel": "Nivel del path",
    "UrlLength": "Longitud del URL"
}       
        st.write("üîç **Caracter√≠sticas extra√≠das:**")
        features_traducidas = {features_es[key]: value for key, value in features.items()}
        features_traducidas["Contiene un elemento de confianza"] = "S√≠" if contiene_safe_word else "No"
        st.json(features_traducidas)

elif selected_tab == "An√°lisis por imagen":
    st.markdown("<h2>PROXIMAMENTE<br>P√ÅGINA EN DESARROLLO</h2>", unsafe_allow_html=True)

elif selected_tab == "Acerca de":
    st.markdown("<h2>Acerca de esta herramienta</h2>", unsafe_allow_html=True)
    st.image("../img/logo3.png", width=300)

    st.write("### Autor")
    st.write("**Juan Zubiaga Delclaux** | The Bridge")

    st.write("### Contacto")
    st.write("üìÇ GITHUB: [Juan Zubiaga](https://github.com/JZubiaga13)")
    st.image("../img/qr.png",width=10)
    
    st.write("### ¬øQu√© es esta herramienta?")
    st.write("Este proyecto fue creado para ayudar a los usuarios a detectar URLs potencialmente peligrosas, como sitios de phishing o estafas en l√≠nea.")
    st.write("El objetivo es proporcionar una forma r√°pida y sencilla de analizar enlaces antes de hacer clic en ellos.")

    st.write("### ¬øC√≥mo funciona?")
    st.write("La herramienta analiza las caracter√≠sticas de un enlace (como su estructura y longitud) para predecir si es seguro o no.")
    st.write("Usa un modelo de Machine Learning que ha sido entrenado con miles de URLs seguras y maliciosas.")

    st.write("### ¬øQu√© es el Machine Learning en este contexto?")
    st.write("El modelo aprende de ejemplos previos para reconocer patrones sospechosos en los enlaces.")
    st.write("No se basa solo en listas negras, sino que detecta se√±ales que podr√≠an indicar un intento de fraude.")

    st.write("### ¬øEs 100% preciso?")
    st.write("Ning√∫n sistema de seguridad es infalible. Aunque el modelo tiene una alta precisi√≥n, siempre es recomendable ser cauteloso y verificar cualquier enlace sospechoso manualmente.")



